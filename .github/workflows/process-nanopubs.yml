# .github/workflows/process-nanopubs.yml
name: Professional Nanopublication Content Generation

env:
  COMMIT_RESULTS_TO_REPO: 'true'

on:
  repository_dispatch:
    types: [process-nanopubs-direct, process-nanopubs-content-gen, process-nanopubs-professional]
  workflow_dispatch:
    inputs:
      nanopub_urls:
        description: 'Comma-separated nanopub URLs'
        required: true
        type: string
      batch_id:
        description: 'Batch ID for this processing run'
        required: false
        type: string
      content_types:
        description: 'Content types to generate (comma-separated)'
        required: false
        type: string
        default: 'linkedin_post'
      ai_model:
        description: 'AI model for content generation'
        required: false
        type: string
        default: 'llama3:8b'

jobs:
  process-nanopubs-professional:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    name: ${{ github.event_name == 'repository_dispatch' && format('Professional Content Generation - Batch {0}', github.event.client_payload.batch_id) || format('Professional Content Generation - Batch {0}', github.event.inputs.batch_id) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Git for Professional Content Generator
      run: |
        echo "Configuring git for professional content generation..."
        git config --global user.email "professional@scienceLive.com"
        git config --global user.name "Science Live Professional Generator"
        echo "Git configured for professional content operations"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          # Install comprehensive dependencies for professional content generation
          pip install requests rdflib pandas numpy nanopub aiohttp ollama asyncio
        fi
        echo "Professional dependencies installed"
    
    - name: Install and Setup Ollama for Professional AI
      run: |
        echo "Setting up Ollama for professional AI content generation..."
        
        # Install Ollama
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Start Ollama service
        ollama serve &
        
        # Wait for Ollama to initialize
        echo "Waiting for Ollama to initialize..."
        sleep 15
        
        # Determine AI model from workflow input
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          AI_MODEL="${{ github.event.client_payload.content_generation.ai_model }}"
        else
          AI_MODEL="${{ github.event.inputs.ai_model }}"
        fi
        
        # Default to professional model if none specified
        AI_MODEL=${AI_MODEL:-"llama3:8b"}
        
        echo "Installing professional AI model: $AI_MODEL"
        timeout 400 ollama pull "$AI_MODEL" || {
          echo "Primary model failed, installing backup model..."
          timeout 400 ollama pull "llama3:8b" || {
            echo "Backup model failed, using minimal model..."
            timeout 400 ollama pull "llama2:7b"
          }
        }
        
        echo "Professional AI setup complete"
    
    - name: Extract professional processing parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "nanopub_urls=${{ github.event.client_payload.nanopub_urls_string }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.client_payload.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=${{ github.event.client_payload.nanopub_count }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.client_payload.source }}" >> $GITHUB_OUTPUT
          
          # Professional content generation parameters
          echo "content_generation_enabled=${{ github.event.client_payload.content_generation.enabled }}" >> $GITHUB_OUTPUT
          echo "content_types=${{ join(github.event.client_payload.content_generation.content_types, ',') }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.client_payload.content_generation.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=${{ github.event.client_payload.content_generation.user_instructions }}" >> $GITHUB_OUTPUT
          echo "batch_description=${{ github.event.client_payload.content_generation.batch_description }}" >> $GITHUB_OUTPUT
        else
          echo "nanopub_urls=${{ github.event.inputs.nanopub_urls }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.inputs.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=$(echo '${{ github.event.inputs.nanopub_urls }}' | tr ',' '\n' | wc -l)" >> $GITHUB_OUTPUT
          echo "source=manual-professional" >> $GITHUB_OUTPUT
          
          # Manual professional inputs
          echo "content_generation_enabled=true" >> $GITHUB_OUTPUT
          echo "content_types=${{ github.event.inputs.content_types }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.inputs.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=" >> $GITHUB_OUTPUT
          echo "batch_description=Professional manual workflow execution" >> $GITHUB_OUTPUT
        fi
    
    - name: Display professional processing information
      run: |
        echo "=== PROFESSIONAL CONTENT GENERATION STARTED ==="
        echo "Batch ID: ${{ steps.params.outputs.batch_id }}"
        echo "Nanopublications: ${{ steps.params.outputs.nanopub_count }}"
        echo "Source: ${{ steps.params.outputs.source }}"
        echo "Started: $(date -u)"
        echo "Workflow Run: ${{ github.run_id }}"
        echo "Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "Professional Content Generation: ENABLED"
          echo "Content Types: ${{ steps.params.outputs.content_types }}"
          echo "AI Model: ${{ steps.params.outputs.ai_model }}"
          echo "User Instructions: ${{ steps.params.outputs.user_instructions }}"
          echo "Batch Description: ${{ steps.params.outputs.batch_description }}"
        else
          echo "Professional Content Generation: DISABLED"
        fi
        echo "Professional Mode: ACTIVE"
        echo "Quality Assurance: ENABLED"
    
    - name: Clone nanopub-content-generator
      run: |
        echo "Cloning professional nanopub-content-generator..."
        git clone https://github.com/ScienceLiveHub/nanopub-content-generator.git
        
        # Verify the clone
        if [ -f "nanopub-content-generator/nanopub_content_generator.py" ]; then
          echo "Successfully cloned nanopub-content-generator"
          ls -la nanopub-content-generator/
        else
          echo "Warning: nanopub_content_generator.py not found in expected location"
          find . -name "nanopub_content_generator.py" || echo "nanopub_content_generator.py not found anywhere"
        fi
        
        # Copy templates if they exist
        if [ -d "templates" ]; then
          cp -r templates nanopub-content-generator/
          echo "Copied templates to nanopub-content-generator"
        fi
    
    - name: Run professional nanopub processing
      env:
        NANOPUB_URLS: ${{ steps.params.outputs.nanopub_urls }}
        NANOPUB_COUNT: ${{ steps.params.outputs.nanopub_count }}
        BATCH_ID: ${{ steps.params.outputs.batch_id }}
        PROCESSING_SOURCE: ${{ steps.params.outputs.source }}
        # Professional content generation environment variables
        ENABLE_CONTENT_GENERATION: ${{ steps.params.outputs.content_generation_enabled }}
        CONTENT_TYPES: ${{ steps.params.outputs.content_types }}
        AI_MODEL: ${{ steps.params.outputs.ai_model }}
        USER_INSTRUCTIONS: ${{ steps.params.outputs.user_instructions }}
        BATCH_DESCRIPTION: ${{ steps.params.outputs.batch_description }}
      run: |
        echo "Executing professional nanopub processor..."
        python scripts/process_nanopubs.py
        
        echo "Checking generated professional content..."
        ls -la ./results/ 2>/dev/null || echo "No results directory found"
        ls -la ./logs/ 2>/dev/null || echo "No logs directory found"
        
        # Show professional content generation results
        if [ -d "./results/content" ]; then
          echo "Professional content generation results:"
          ls -la ./results/content/
          
          echo "Generated professional content files:"
          find ./results/content -name "*.txt" -type f | head -10
          
          # Show file sizes and content preview
          for file in ./results/content/*.txt; do
            if [ -f "$file" ]; then
              echo "=== $(basename "$file") ==="
              echo "Size: $(wc -c < "$file") bytes"
              echo "Lines: $(wc -l < "$file")"
              echo "Preview:"
              head -5 "$file"
              echo "---"
            fi
          done
        fi
        
        # Show configuration files
        if [ -d "./config" ]; then
          echo "Configuration files:"
          ls -la ./config/
        fi
    
    - name: Ensure professional results structure
      run: |
        echo "Ensuring professional results directory structure..."
        find . -name "results" -o -name "logs" -o -name "config" -type d 2>/dev/null || echo "Checking directory structure..."
        
        mkdir -p results logs config
        echo "Created professional base directories"
        
        # List generated content
        echo "Professional content files:"
        find results -type f 2>/dev/null || echo "No files in results directory"
        
        echo "Log files:"
        find logs -type f 2>/dev/null || echo "No files in logs directory"
        
        echo "Configuration files:"
        find config -type f 2>/dev/null || echo "No files in config directory"
        
        # Create professional summary if missing
        if [ ! -f "logs/processing_summary.txt" ]; then
          echo "Creating professional processing summary..."
          echo "Professional content generation completed at $(date -u)" > logs/professional_summary.txt
          echo "Batch ID: ${{ steps.params.outputs.batch_id }}" >> logs/professional_summary.txt
          echo "Content Types: ${{ steps.params.outputs.content_types }}" >> logs/professional_summary.txt
          echo "AI Model: ${{ steps.params.outputs.ai_model }}" >> logs/professional_summary.txt
        fi
        
        if [ ! -f "results/batch_results.json" ]; then
          echo "Creating professional batch results..."
          echo '{"professional_mode": true, "batch_id": "${{ steps.params.outputs.batch_id }}", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "content_types": "${{ steps.params.outputs.content_types }}", "ai_model": "${{ steps.params.outputs.ai_model }}"}' > results/professional_results.json
        fi
        
        echo "Professional results structure verified"
    
    - name: Upload professional processing results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: professional-nanopub-content-results-${{ steps.params.outputs.batch_id }}
        path: |
          results/**/*
          logs/**/*
          config/**/*
          nanopub-content-generator/**/*.json
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create professional results summary
      if: always()
      run: |
        echo "## Professional Nanopublication Content Generation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Batch ID:** \`${{ steps.params.outputs.batch_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Nanopublications Processed:** ${{ steps.params.outputs.nanopub_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**Processing Time:** $(date -d @$SECONDS -u +%H:%M:%S)" >> $GITHUB_STEP_SUMMARY
        echo "**Professional Mode:** ENABLED" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "**Content Generation:** ENABLED" >> $GITHUB_STEP_SUMMARY
          echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> $GITHUB_STEP_SUMMARY
          echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Content Generation:** DISABLED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "logs/processing_summary.txt" ]; then
          echo "### Professional Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -50 logs/processing_summary.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "results/batch_results.json" ]; then
          echo "### Professional Content Statistics" >> $GITHUB_STEP_SUMMARY
          PROCESSED=$(jq -r '.content_generated // .successful_templates // 0' results/batch_results.json)
          TOTAL_TIME=$(jq -r '.processing_time // 0' results/batch_results.json)
          echo "- Successfully generated: $PROCESSED content files" >> $GITHUB_STEP_SUMMARY
          echo "- Total processing time: ${TOTAL_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "- Professional standards: APPLIED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Show professional content generation results
        if [ -d "results/content" ] && [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "### Professional Content Generated" >> $GITHUB_STEP_SUMMARY
          CONTENT_COUNT=$(find results/content -name "*.txt" -type f | wc -l)
          echo "- Professional content files: $CONTENT_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ $CONTENT_COUNT -gt 0 ]; then
            echo "- Content formats created:" >> $GITHUB_STEP_SUMMARY
            find results/content -name "*.txt" -type f -exec basename {} .txt \; | sed 's/.*_\([^_]*\)$/- \1/' | sort | uniq >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access Professional Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Download Results:** Check the artifacts section above" >> $GITHUB_STEP_SUMMARY
        echo "- **Results Branch:** \`results-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **View Results:** [Browse Professional Files](https://github.com/${{ github.repository }}/tree/results-${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Download ZIP:** [Download All Professional Results](https://github.com/${{ github.repository }}/archive/refs/heads/results-${{ github.run_id }}.zip)" >> $GITHUB_STEP_SUMMARY
    
    - name: Commit professional results to repository
      run: |
        echo "Committing professional results to repository..."
        echo "Professional results will be committed to dedicated branch for access"
        
        # Create unique professional results branch
        RESULTS_BRANCH="professional-results-${{ github.run_id }}"
        echo "Creating professional results branch: $RESULTS_BRANCH"
        
        git config --local user.email "professional@scienceLive.com"
        git config --local user.name "Science Live Professional Generator"
        
        # Create new branch for professional results
        git checkout -b "$RESULTS_BRANCH"
        echo "Created professional branch $RESULTS_BRANCH"
        
        # Create professional results directory structure
        mkdir -p professional-results/${{ steps.params.outputs.batch_id }}
        
        # Copy professional results to permanent location
        if [ -d "results" ]; then
          cp -r results/* professional-results/${{ steps.params.outputs.batch_id }}/
          echo "Copied professional results files"
        fi
        
        if [ -d "logs" ]; then
          cp -r logs/* professional-results/${{ steps.params.outputs.batch_id }}/
          echo "Copied professional log files"
        fi
        
        if [ -d "config" ]; then
          cp -r config/* professional-results/${{ steps.params.outputs.batch_id }}/
          echo "Copied professional configuration files"
        fi
        
        # Create professional index file
        cat > professional-results/${{ steps.params.outputs.batch_id }}/README.md << EOF
        # Professional Nanopublication Content Generation Results - ${{ steps.params.outputs.batch_id }}
        
        **Generated:** $(date -u)
        **Nanopublications:** ${{ steps.params.outputs.nanopub_count }}
        **Source:** ${{ steps.params.outputs.source }}
        **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        **Results Branch:** [\`$RESULTS_BRANCH\`](${{ github.server_url }}/${{ github.repository }}/tree/$RESULTS_BRANCH)
        
        ## Professional Content Generation
        **Status:** ${{ steps.params.outputs.content_generation_enabled }}
        **Content Types:** ${{ steps.params.outputs.content_types }}
        **AI Model:** ${{ steps.params.outputs.ai_model }}
        **User Instructions:** ${{ steps.params.outputs.user_instructions }}
        **Professional Mode:** ENABLED
        **Quality Assurance:** APPLIED
        
        ## Professional Results Structure
        - \`batch_results.json\` - Professional processing results
        - \`professional_summary.txt\` - Professional processing summary
        - \`content/\` - Generated professional content files
        - \`config/\` - Professional configuration files used
        
        ## Processed Nanopublications
        ${{ steps.params.outputs.nanopub_urls }}
        
        ## Professional Access
        - [View Professional Results](${{ github.server_url }}/${{ github.repository }}/tree/$RESULTS_BRANCH/professional-results/${{ steps.params.outputs.batch_id }})
        - [Download Professional ZIP](${{ github.server_url }}/${{ github.repository }}/archive/refs/heads/$RESULTS_BRANCH.zip)
        - [Original Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ## Professional Content
        EOF
        
        # Add professional content file listings
        if [ -d "professional-results/${{ steps.params.outputs.batch_id }}/content" ]; then
          echo "" >> professional-results/${{ steps.params.outputs.batch_id }}/README.md
          echo "### Professional Content Files" >> professional-results/${{ steps.params.outputs.batch_id }}/README.md
          find professional-results/${{ steps.params.outputs.batch_id }}/content -name "*.txt" -type f | while read file; do
            filename=$(basename "$file")
            echo "- [\`$filename\`](${{ github.server_url }}/${{ github.repository }}/blob/$RESULTS_BRANCH/professional-results/${{ steps.params.outputs.batch_id }}/content/$filename)" >> professional-results/${{ steps.params.outputs.batch_id }}/README.md
          done
        fi
        
        # Create professional summary in root
        cat > PROFESSIONAL_SUMMARY.md << EOF
        # Professional Content Generation Summary
        
        **Batch ID:** ${{ steps.params.outputs.batch_id }}
        **Workflow Run:** ${{ github.run_id }}
        **Branch:** $RESULTS_BRANCH
        **Timestamp:** $(date -u)
        **Mode:** PROFESSIONAL
        
        This branch contains professional nanopublication processing results with AI-generated content.
        
        ## Professional Content Types
        ${{ steps.params.outputs.content_types }}
        
        ## AI Configuration
        - Model: ${{ steps.params.outputs.ai_model }}
        - Instructions: "${{ steps.params.outputs.user_instructions }}"
        - Professional Standards: APPLIED
        - Quality Assurance: ENABLED
        
        ## Professional Contents
        - \`professional-results/${{ steps.params.outputs.batch_id }}/\` - All professional generated files
        - Professional content in multiple formats optimized for business use
        - Comprehensive professional documentation and metadata
        - Professional processing logs and configuration files
        
        ## Original Professional Workflow
        View the original professional workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        EOF
        
        # Add and commit professional files
        git add professional-results/ PROFESSIONAL_SUMMARY.md
        
        # Check for professional changes to commit
        if ! git diff --cached --quiet; then
          echo "Committing professional content generation results..."
          git commit -m "Add professional nanopublication content generation results for batch ${{ steps.params.outputs.batch_id }}

          Workflow Run: ${{ github.run_id }}
          Batch ID: ${{ steps.params.outputs.batch_id }}
          Processed: ${{ steps.params.outputs.nanopub_count }} nanopublications
          Source: ${{ steps.params.outputs.source }}
          Content Generation: ${{ steps.params.outputs.content_generation_enabled }}
          Content Types: ${{ steps.params.outputs.content_types }}
          AI Model: ${{ steps.params.outputs.ai_model }}
          Professional Mode: ENABLED
          Quality Assurance: APPLIED
          Timestamp: $(date -u)
          
          Professional files generated:
          - Professional content files in multiple formats
          - batch_results.json (professional processing results)
          - professional_summary.txt (professional processing summary)
          - Professional configuration files
          - Professional documentation and metadata"
          
          # Push professional results branch
          echo "Pushing professional results branch $RESULTS_BRANCH..."
          git push origin "$RESULTS_BRANCH"
          
          echo "Professional content generation results committed to branch: $RESULTS_BRANCH"
          echo "View professional results: ${{ github.server_url }}/${{ github.repository }}/tree/$RESULTS_BRANCH/professional-results/${{ steps.params.outputs.batch_id }}"
          echo "Download professional ZIP: ${{ github.server_url }}/${{ github.repository }}/archive/refs/heads/$RESULTS_BRANCH.zip"
        else
          echo "No new professional results to commit"
        fi
