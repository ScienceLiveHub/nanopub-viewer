# .github/workflows/process-nanopubs.yml
name: Process Nanopublications

# Results are always committed to a unique branch for web display
env:
  COMMIT_RESULTS_TO_REPO: 'true'  # Always true - required for web display

on:
  repository_dispatch:
    types: [process-nanopubs-direct, process-nanopubs-content-gen]
  workflow_dispatch:
    inputs:
      nanopub_urls:
        description: 'Comma-separated nanopub URLs'
        required: true
        type: string
      batch_id:
        description: 'Batch ID for this processing run'
        required: false
        type: string
      content_types:
        description: 'Content types to generate (comma-separated)'
        required: false
        type: string
        default: 'linkedin_post'
      ai_model:
        description: 'AI model for content generation'
        required: false
        type: string
        default: 'llama3:8b'

jobs:
  process-nanopubs:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Increased timeout for content generation
    
    # Set a dynamic name for the job that includes the batch ID
    name: ${{ github.event_name == 'repository_dispatch' && format('Process Batch {0}', github.event.client_payload.batch_id) || format('Process Batch {0}', github.event.inputs.batch_id) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Git for Content Generator
      run: |
        echo "🔧 Configuring git for content generator cloning..."
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Actions"
        echo "✅ Git configured for automated operations"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          # Fallback to minimal dependencies if requirements.txt not found
          pip install requests rdflib pandas numpy nanopub aiohttp
        fi
    
    - name: Install and Setup Ollama for Content Generation
      run: |
        echo "🤖 Setting up Ollama for AI content generation..."
        
        # Install Ollama
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Start Ollama service in background
        ollama serve &
        
        # Wait for Ollama to start
        echo "⏳ Waiting for Ollama to start..."
        sleep 10
        
        # Determine which model to pull based on workflow input
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          AI_MODEL="${{ github.event.client_payload.content_generation.ai_model }}"
        else
          AI_MODEL="${{ github.event.inputs.ai_model }}"
        fi
        
        # Default to a lightweight model if none specified
        AI_MODEL=${AI_MODEL:-"llama2:7b"}
        
        echo "📥 Pulling AI model: $AI_MODEL"
        timeout 300 ollama pull "$AI_MODEL" || {
          echo "⚠️  Failed to pull $AI_MODEL, trying fallback model..."
          timeout 300 ollama pull "llama2:7b" || echo "⚠️  Model pull failed, will use fallback processing"
        }
        
        echo "✅ Ollama setup complete"
    
    - name: Extract processing parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "nanopub_urls=${{ github.event.client_payload.nanopub_urls_string }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.client_payload.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=${{ github.event.client_payload.nanopub_count }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.client_payload.source }}" >> $GITHUB_OUTPUT
          
          # Content generation parameters
          echo "content_generation_enabled=${{ github.event.client_payload.content_generation.enabled }}" >> $GITHUB_OUTPUT
          echo "content_types=${{ join(github.event.client_payload.content_generation.content_types, ',') }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.client_payload.content_generation.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=${{ github.event.client_payload.content_generation.user_instructions }}" >> $GITHUB_OUTPUT
          echo "batch_description=${{ github.event.client_payload.content_generation.batch_description }}" >> $GITHUB_OUTPUT
        else
          echo "nanopub_urls=${{ github.event.inputs.nanopub_urls }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.inputs.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=$(echo '${{ github.event.inputs.nanopub_urls }}' | tr ',' '\n' | wc -l)" >> $GITHUB_OUTPUT
          echo "source=manual" >> $GITHUB_OUTPUT
          
          # Manual workflow inputs
          echo "content_generation_enabled=true" >> $GITHUB_OUTPUT
          echo "content_types=${{ github.event.inputs.content_types }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.inputs.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=" >> $GITHUB_OUTPUT
          echo "batch_description=Manual workflow execution" >> $GITHUB_OUTPUT
        fi
    
    - name: Display processing info
      run: |
        echo "🚀 Starting nanopub content generation processing"
        echo "📊 Batch ID: ${{ steps.params.outputs.batch_id }}"
        echo "🔢 Count: ${{ steps.params.outputs.nanopub_count }} nanopubs"
        echo "📋 Source: ${{ steps.params.outputs.source }}"
        echo "⏰ Started: $(date -u)"
        echo "🎯 Workflow Run: ${{ github.run_id }}"
        echo "🔗 Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "🎨 Content Generation: ENABLED"
          echo "📄 Content Types: ${{ steps.params.outputs.content_types }}"
          echo "🤖 AI Model: ${{ steps.params.outputs.ai_model }}"
          echo "📝 User Instructions: ${{ steps.params.outputs.user_instructions }}"
          echo "📋 Description: ${{ steps.params.outputs.batch_description }}"
        else
          echo "🎨 Content Generation: DISABLED"
        fi
    
    - name: Run nanopub processing with content generation
      env:
        NANOPUB_URLS: ${{ steps.params.outputs.nanopub_urls }}
        NANOPUB_COUNT: ${{ steps.params.outputs.nanopub_count }}
        BATCH_ID: ${{ steps.params.outputs.batch_id }}
        PROCESSING_SOURCE: ${{ steps.params.outputs.source }}
        # Content generation environment variables
        ENABLE_CONTENT_GENERATION: ${{ steps.params.outputs.content_generation_enabled }}
        CONTENT_TYPES: ${{ steps.params.outputs.content_types }}
        AI_MODEL: ${{ steps.params.outputs.ai_model }}
        USER_INSTRUCTIONS: ${{ steps.params.outputs.user_instructions }}
        BATCH_DESCRIPTION: ${{ steps.params.outputs.batch_description }}
      run: |
        echo "🔬 Executing nanopub processor with content generation..."
        python scripts/process_nanopubs.py
        echo "📁 Checking generated files..."
        ls -la ./results/ 2>/dev/null || echo "No results directory found"
        ls -la ./logs/ 2>/dev/null || echo "No logs directory found"
        
        # Show content generation results if available
        if [ -d "./results/content" ]; then
          echo "🎯 Content generation results:"
          ls -la ./results/content/
          
          echo "📄 Generated content files:"
          find ./results/content -name "*.txt" -type f | head -10
        fi
    
    - name: Ensure directories exist for artifacts
      run: |
        echo "📁 Current directory structure before ensuring directories:"
        find . -name "results" -o -name "logs" -type d 2>/dev/null || echo "No results/logs directories found"
        
        mkdir -p results logs
        echo "📁 Created base directories"
        
        # List what files exist
        echo "📄 Files in results directory:"
        find results -type f 2>/dev/null || echo "No files in results directory"
        
        echo "📄 Files in logs directory:"
        find logs -type f 2>/dev/null || echo "No files in logs directory"
        
        # Create a basic summary file if processing failed
        if [ ! -f "logs/processing_summary.txt" ]; then
          echo "⚠️ No processing summary found - creating error file"
          echo "Processing may have failed - no summary file generated at $(date -u)" > logs/error_summary.txt
        fi
        
        if [ ! -f "results/batch_results.json" ]; then
          echo "⚠️ No batch results found - creating error file"
          echo '{"error": "No batch results generated", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "batch_id": "${{ steps.params.outputs.batch_id }}"}' > results/error_results.json
        fi
        
        echo "📄 Final file check before artifact upload:"
        find results logs -type f 2>/dev/null || echo "Still no files found"
    
    - name: Upload processing results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nanopub-content-generation-results-${{ steps.params.outputs.batch_id }}
        path: |
          results/**/*
          logs/**/*
          nanopub-content-generator/**/*.json
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create results summary
      if: always()
      run: |
        echo "## 📊 Nanopub Content Generation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Batch ID:** \`${{ steps.params.outputs.batch_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Nanopubs Processed:** ${{ steps.params.outputs.nanopub_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**Processing Time:** $(date -d @$SECONDS -u +%H:%M:%S)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "**Content Generation:** ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> $GITHUB_STEP_SUMMARY
          echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Content Generation:** ❌ Disabled" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "logs/processing_summary.txt" ]; then
          echo "### 📋 Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -50 logs/processing_summary.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "results/batch_results.json" ]; then
          echo "### 📈 Quick Stats" >> $GITHUB_STEP_SUMMARY
          PROCESSED=$(jq -r '.processed // .successful_templates // 0' results/batch_results.json)
          FAILED=$(jq -r '.failed // 0' results/batch_results.json)
          TOTAL_TIME=$(jq -r '.processing_time_seconds // 0' results/batch_results.json)
          echo "- ✅ Successfully processed: $PROCESSED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ Total time: ${TOTAL_TIME}s" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Show content generation results if available
        if [ -d "results/content" ] && [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "### 🎨 Generated Content" >> $GITHUB_STEP_SUMMARY
          CONTENT_COUNT=$(find results/content -name "*.txt" -type f | wc -l)
          echo "- 📄 Content files generated: $CONTENT_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ $CONTENT_COUNT -gt 0 ]; then
            echo "- 📋 Content types created:" >> $GITHUB_STEP_SUMMARY
            find results/content -name "*.txt" -type f -exec basename {} .txt \; | sed 's/.*_\([^_]*\)$/- \1/' | sort | uniq >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 **Download Results:** Check the artifacts section above" >> $GITHUB_STEP_SUMMARY
        echo "🌿 **Results Branch:** \`results-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **View Results:** [Browse Files](https://github.com/${{ github.repository }}/tree/results-${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "📦 **Download ZIP:** [Download All Results](https://github.com/${{ github.repository }}/archive/refs/heads/results-${{ github.run_id }}.zip)" >> $GITHUB_STEP_SUMMARY
    
    - name: Commit results to repository
      run: |
        echo "🔄 Committing results to repository..."
        echo "📊 Results will be committed to unique branch for web display"
        
        # Create unique branch name using workflow run ID
        RESULTS_BRANCH="results-${{ github.run_id }}"
        echo "🌿 Creating unique results branch: $RESULTS_BRANCH"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions - Nanopub Content Generator"
        
        # Create new branch from current state (main/master)
        git checkout -b "$RESULTS_BRANCH"
        echo "✅ Created branch $RESULTS_BRANCH"
        
        # Create results directory structure
        mkdir -p processing-results/${{ steps.params.outputs.batch_id }}
        
        # Copy results to permanent location
        if [ -d "results" ]; then
          cp -r results/* processing-results/${{ steps.params.outputs.batch_id }}/
          echo "✅ Copied results files"
        else
          echo "⚠️  No results directory found"
        fi
        
        if [ -d "logs" ]; then
          cp -r logs/* processing-results/${{ steps.params.outputs.batch_id }}/
          echo "✅ Copied log files"
        else
          echo "⚠️  No logs directory found"
        fi
        
        # Create an enhanced index file for this batch
        cat > processing-results/${{ steps.params.outputs.batch_id }}/README.md << EOF
        # Nanopub Content Generation Results - ${{ steps.params.outputs.batch_id }}
        
        **Processed:** $(date -u)
        **Nanopubs:** ${{ steps.params.outputs.nanopub_count }}
        **Source:** ${{ steps.params.outputs.source }}
        **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        **Results Branch:** [\`$RESULTS_BRANCH\`](${{ github.server_url }}/${{ github.repository }}/tree/$RESULTS_BRANCH)
        
        ## Content Generation
        **Enabled:** ${{ steps.params.outputs.content_generation_enabled }}
        **Content Types:** ${{ steps.params.outputs.content_types }}
        **AI Model:** ${{ steps.params.outputs.ai_model }}
        **User Instructions:** ${{ steps.params.outputs.user_instructions }}
        
        ## Files Generated
        - \`batch_results.json\` - Main processing results
        - \`content_generation_summary.json\` - Content generation overview
        - \`processing_summary.txt\` - Human-readable summary
        - \`content/\` - Generated content files (LinkedIn posts, papers, etc.)
        - \`individual/\` - Individual nanopub analyses
        
        ## Processed URLs
        ${{ steps.params.outputs.nanopub_urls }}
        
        ## Quick Access
        - [View Results](${{ github.server_url }}/${{ github.repository }}/tree/$RESULTS_BRANCH/processing-results/${{ steps.params.outputs.batch_id }})
        - [Download ZIP](${{ github.server_url }}/${{ github.repository }}/archive/refs/heads/$RESULTS_BRANCH.zip)
        - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ## Generated Content
        EOF
        
        # Add content file listings if they exist
        if [ -d "processing-results/${{ steps.params.outputs.batch_id }}/content" ]; then
          echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
          echo "### Content Files" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
          find processing-results/${{ steps.params.outputs.batch_id }}/content -name "*.txt" -type f | while read file; do
            filename=$(basename "$file")
            echo "- [\`$filename\`](${{ github.server_url }}/${{ github.repository }}/blob/$RESULTS_BRANCH/processing-results/${{ steps.params.outputs.batch_id }}/content/$filename)" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
          done
        fi
        
        # Create a summary file in the root for easy discovery
        cat > PROCESSING_SUMMARY.md << EOF
        # Content Generation Summary
        
        **Batch ID:** ${{ steps.params.outputs.batch_id }}
        **Workflow Run:** ${{ github.run_id }}
        **Branch:** $RESULTS_BRANCH
        **Timestamp:** $(date -u)
        
        This branch contains nanopub processing results with AI-generated content.
        
        ## Generated Content Types
        ${{ steps.params.outputs.content_types }}
        
        ## AI Configuration
        - Model: ${{ steps.params.outputs.ai_model }}
        - Instructions: "${{ steps.params.outputs.user_instructions }}"
        
        ## Contents
        - \`processing-results/${{ steps.params.outputs.batch_id }}/\` - All generated files
        - Generated content in multiple formats (LinkedIn, Bluesky, Scientific papers, etc.)
        - Individual nanopub analyses and metadata
        - Processing logs and summaries
        
        ## Original Workflow
        View the original workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        EOF
        
        # Add and commit files
        git add processing-results/ PROCESSING_SUMMARY.md
        
        # Check if there are any changes to commit
        if ! git diff --cached --quiet; then
          echo "📝 Committing content generation results to branch $RESULTS_BRANCH..."
          git commit -m "Add nanopub content generation results for batch ${{ steps.params.outputs.batch_id }}

          Workflow Run: ${{ github.run_id }}
          Batch ID: ${{ steps.params.outputs.batch_id }}
          Processed: ${{ steps.params.outputs.nanopub_count }} nanopublications
          Source: ${{ steps.params.outputs.source }}
          Content Generation: ${{ steps.params.outputs.content_generation_enabled }}
          Content Types: ${{ steps.params.outputs.content_types }}
          AI Model: ${{ steps.params.outputs.ai_model }}
          Timestamp: $(date -u)
          
          Generated files:
          - Content files in multiple formats
          - batch_results.json (main processing results)
          - content_generation_summary.json (content overview)
          - processing_summary.txt (human-readable summary)
          - individual/ (individual nanopub analyses)"
          
          # Push the new branch - no conflicts possible since it's unique
          echo "📤 Pushing new branch $RESULTS_BRANCH..."
          git push origin "$RESULTS_BRANCH"
          
          echo "✅ Content generation results committed and pushed to branch: $RESULTS_BRANCH"
          echo "🔗 View results: ${{ github.server_url }}/${{ github.repository }}/tree/$RESULTS_BRANCH/processing-results/${{ steps.params.outputs.batch_id }}"
          echo "📦 Download ZIP: ${{ github.server_url }}/${{ github.repository }}/archive/refs/heads/$RESULTS_BRANCH.zip"
        else
          echo "ℹ️ No new results to commit"
        fi
