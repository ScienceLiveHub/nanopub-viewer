# .github/workflows/process-nanopubs.yml
name: Science Live Content Generation

on:
  repository_dispatch:
    types: [process-nanopubs-content-gen, process-nanopubs-direct, process-nanopubs-professional]
  workflow_dispatch:
    inputs:
      nanopub_urls:
        description: 'Comma-separated nanopub URLs'
        required: true
        type: string
      batch_id:
        description: 'Batch ID for this processing run'
        required: false
        type: string
      content_types:
        description: 'Content types to generate (comma-separated)'
        required: false
        type: string
        default: 'linkedin_post'
      ai_model:
        description: 'AI model for content generation'
        required: false
        type: string
        default: 'llama3:8b'

env:
  COMMIT_RESULTS_TO_REPO: 'true'

jobs:
  process-nanopubs-content:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Git configuration
      run: |
        git config --global user.email "content-generator@sciencelive.com"
        git config --global user.name "Science Live Content Generator"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests rdflib pandas numpy aiohttp asyncio
        
        # Install nanopub library with error handling
        pip install nanopub || echo "Warning: nanopub library installation failed, will use fallback"
        
        # Install ollama library
        pip install ollama || echo "Warning: ollama library installation failed"
        
        # Install additional dependencies that might be needed
        pip install lxml beautifulsoup4 || echo "Warning: some optional dependencies failed"
    
    - name: Clone and setup nanopub-content-generator
      run: |
        echo "üîÑ Cloning nanopub-content-generator repository..."
        
        # Try to clone the repository
        if git clone https://github.com/ScienceLiveHub/nanopub-content-generator.git; then
          echo "‚úÖ Successfully cloned nanopub-content-generator"
          
          # Verify the main file exists
          if [ -f "nanopub-content-generator/nanopub_content_generator.py" ]; then
            echo "‚úÖ nanopub_content_generator.py found"
          else
            echo "‚ùå nanopub_content_generator.py not found in cloned repository"
            ls -la nanopub-content-generator/
            exit 1
          fi
          
          # Copy templates if they exist in this repo
          if [ -d "templates" ]; then
            cp -r templates nanopub-content-generator/ 2>/dev/null || echo "Templates not found in main repo"
            echo "üìÅ Copied templates to nanopub-content-generator"
          fi
          
          # Copy endpoints.py if it exists
          if [ -f "endpoints.py" ]; then
            cp endpoints.py nanopub-content-generator/ 2>/dev/null || echo "endpoints.py not found"
            echo "üìÅ Copied endpoints.py to nanopub-content-generator"
          fi
          
          # Install dependencies for the content generator
          cd nanopub-content-generator
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt || echo "Warning: some content generator dependencies failed"
          fi
          cd ..
          
        else
          echo "‚ùå Failed to clone nanopub-content-generator repository"
          echo "This will cause content generation to fail"
          exit 1
        fi
    
    - name: Install and Setup Ollama
      run: |
        echo "ü§ñ Installing Ollama..."
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Start ollama service in background
        echo "üöÄ Starting Ollama service..."
        ollama serve &
        
        # Wait for ollama to be ready
        echo "‚è≥ Waiting for Ollama to be ready..."
        sleep 30
        
        # Determine which AI model to use
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          AI_MODEL="${{ github.event.client_payload.content_generation.ai_model }}"
        else
          AI_MODEL="${{ github.event.inputs.ai_model }}"
        fi
        
        AI_MODEL=${AI_MODEL:-"llama3:8b"}
        echo "üì• Installing AI model: $AI_MODEL"
        
        # Try to install the requested model, with fallbacks
        if timeout 600 ollama pull "$AI_MODEL"; then
          echo "‚úÖ Successfully installed $AI_MODEL"
        elif timeout 600 ollama pull "llama3:8b"; then
          echo "‚ö†Ô∏è  Fallback: installed llama3:8b instead of $AI_MODEL"
        elif timeout 600 ollama pull "llama2:7b"; then
          echo "‚ö†Ô∏è  Fallback: installed llama2:7b instead of $AI_MODEL"
        else
          echo "‚ùå Failed to install any AI model"
          exit 1
        fi
        
        # Verify ollama is working
        echo "üîç Testing Ollama installation..."
        ollama list || echo "Warning: Could not list ollama models"
    
    - name: Extract processing parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "nanopub_urls=${{ github.event.client_payload.nanopub_urls_string }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.client_payload.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=${{ github.event.client_payload.nanopub_count }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.client_payload.source }}" >> $GITHUB_OUTPUT
          echo "content_generation_enabled=${{ github.event.client_payload.content_generation.enabled }}" >> $GITHUB_OUTPUT
          echo "content_types=${{ join(github.event.client_payload.content_generation.content_types, ',') }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.client_payload.content_generation.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=${{ github.event.client_payload.content_generation.user_instructions }}" >> $GITHUB_OUTPUT
          echo "batch_description=${{ github.event.client_payload.content_generation.batch_description }}" >> $GITHUB_OUTPUT
        else
          echo "nanopub_urls=${{ github.event.inputs.nanopub_urls }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.inputs.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=$(echo '${{ github.event.inputs.nanopub_urls }}' | tr ',' '\n' | wc -l)" >> $GITHUB_OUTPUT
          echo "source=manual-workflow" >> $GITHUB_OUTPUT
          echo "content_generation_enabled=true" >> $GITHUB_OUTPUT
          echo "content_types=${{ github.event.inputs.content_types }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.inputs.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=" >> $GITHUB_OUTPUT
          echo "batch_description=Manual workflow execution" >> $GITHUB_OUTPUT
        fi
    
    - name: Display processing information
      run: |
        echo "=== SCIENCE LIVE CONTENT GENERATION STARTED ==="
        echo "Timestamp: $(date -u)"
        echo "Batch ID: ${{ steps.params.outputs.batch_id }}"
        echo "Nanopublications: ${{ steps.params.outputs.nanopub_count }}"
        echo "Source: ${{ steps.params.outputs.source }}"
        echo "Workflow Run: ${{ github.run_id }}"
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "Content Generation: ENABLED"
          echo "Content Types: ${{ steps.params.outputs.content_types }}"
          echo "AI Model: ${{ steps.params.outputs.ai_model }}"
          echo "User Instructions: ${{ steps.params.outputs.user_instructions }}"
        else
          echo "Content Generation: DISABLED"
        fi
        
        echo "=================================================="
        echo "üîç Verifying setup..."
        echo "Python version: $(python --version)"
        echo "Ollama status: $(pgrep ollama > /dev/null && echo 'RUNNING' || echo 'NOT RUNNING')"
        echo "Content generator: $([ -f 'nanopub-content-generator/nanopub_content_generator.py' ] && echo 'FOUND' || echo 'NOT FOUND')"
        echo "=================================================="
    
    - name: Run content generation processing
      env:
        NANOPUB_URLS: ${{ steps.params.outputs.nanopub_urls }}
        NANOPUB_COUNT: ${{ steps.params.outputs.nanopub_count }}
        BATCH_ID: ${{ steps.params.outputs.batch_id }}
        PROCESSING_SOURCE: ${{ steps.params.outputs.source }}
        ENABLE_CONTENT_GENERATION: ${{ steps.params.outputs.content_generation_enabled }}
        CONTENT_TYPES: ${{ steps.params.outputs.content_types }}
        AI_MODEL: ${{ steps.params.outputs.ai_model }}
        USER_INSTRUCTIONS: ${{ steps.params.outputs.user_instructions }}
        BATCH_DESCRIPTION: ${{ steps.params.outputs.batch_description }}
      run: |
        echo "üöÄ Starting content generation processing..."
        
        # Verify the processing script exists
        if [ ! -f "scripts/process_nanopubs.py" ]; then
          echo "‚ùå Error: scripts/process_nanopubs.py not found"
          exit 1
        fi
        
        # Ensure output directories exist
        mkdir -p results logs config results/content
        
        echo "üìä Processing parameters:"
        echo "- URLs: $NANOPUB_URLS"
        echo "- Content types: $CONTENT_TYPES"
        echo "- AI model: $AI_MODEL"
        echo "- Batch ID: $BATCH_ID"
        
        # Run the processing script
        python scripts/process_nanopubs.py
        
        echo "‚úÖ Processing completed"
        
        # Show what was generated
        if [ -d "./results/content" ]; then
          echo "=== CONTENT GENERATION RESULTS ==="
          ls -la ./results/content/
          echo ""
          echo "üìÑ Generated files:"
          find ./results/content -name "*.txt" -type f | while read file; do
            echo "   $(basename "$file") ($(wc -c < "$file") bytes)"
          done
        else
          echo "‚ö†Ô∏è  No content directory found"
        fi
        
        # Show processing summary if available
        if [ -f "logs/processing_summary.txt" ]; then
          echo ""
          echo "=== PROCESSING SUMMARY ==="
          head -20 logs/processing_summary.txt
        fi
    
    - name: Verify generation results
      run: |
        echo "üîç Verifying content generation results..."
        
        # Check if any content was actually generated
        CONTENT_COUNT=$(find results/content -name "*.txt" -type f 2>/dev/null | wc -l)
        echo "üìä Generated content files: $CONTENT_COUNT"
        
        if [ "$CONTENT_COUNT" -gt 0 ]; then
          echo "‚úÖ Content generation successful"
          
          # Show brief preview of generated content
          find results/content -name "*.txt" -type f | head -3 | while read file; do
            echo ""
            echo "üìÑ Preview of $(basename "$file"):"
            echo "----------------------------------------"
            head -10 "$file" | grep -v "^#" | grep -v "^=" | head -3
            echo "..."
          done
        else
          echo "‚ùå No content files were generated"
          
          # Check for error files
          ERROR_COUNT=$(find results/content -name "*ERROR*" -type f 2>/dev/null | wc -l)
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $ERROR_COUNT error files"
            find results/content -name "*ERROR*" -type f | while read file; do
              echo "üìÑ Error in $(basename "$file"):"
              head -5 "$file"
            done
          fi
        fi
    
    - name: Ensure results structure
      run: |
        # Create the processing-results directory structure
        mkdir -p processing-results/${{ steps.params.outputs.batch_id }}
        
        # Ensure we have a processing summary
        if [ ! -f "logs/processing_summary.txt" ]; then
          echo "SCIENCE LIVE CONTENT GENERATION SUMMARY" > logs/processing_summary.txt
          echo "=======================================" >> logs/processing_summary.txt
          echo "Batch ID: ${{ steps.params.outputs.batch_id }}" >> logs/processing_summary.txt
          echo "Timestamp: $(date -u)" >> logs/processing_summary.txt
          echo "Nanopublications: ${{ steps.params.outputs.nanopub_count }}" >> logs/processing_summary.txt
          echo "Content Types: ${{ steps.params.outputs.content_types }}" >> logs/processing_summary.txt
          echo "AI Model: ${{ steps.params.outputs.ai_model }}" >> logs/processing_summary.txt
          echo "Source: ${{ steps.params.outputs.source }}" >> logs/processing_summary.txt
          echo "Workflow Run: ${{ github.run_id }}" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "PROCESSING COMPLETED" >> logs/processing_summary.txt
          echo "Status: SUCCESS" >> logs/processing_summary.txt
          echo "Content Generation: ${{ steps.params.outputs.content_generation_enabled }}" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "NANOPUBLICATION SOURCES:" >> logs/processing_summary.txt
          echo "${{ steps.params.outputs.nanopub_urls }}" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "Generated at: $(date -u)" >> logs/processing_summary.txt
        fi
        
        # Ensure we have batch results
        if [ ! -f "results/batch_results.json" ]; then
          echo "{" > results/batch_results.json
          echo "  \"batch_id\": \"${{ steps.params.outputs.batch_id }}\"," >> results/batch_results.json
          echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> results/batch_results.json
          echo "  \"nanopub_count\": ${{ steps.params.outputs.nanopub_count }}," >> results/batch_results.json
          echo "  \"content_types\": \"${{ steps.params.outputs.content_types }}\"," >> results/batch_results.json
          echo "  \"ai_model\": \"${{ steps.params.outputs.ai_model }}\"," >> results/batch_results.json
          echo "  \"source\": \"${{ steps.params.outputs.source }}\"," >> results/batch_results.json
          echo "  \"workflow_run_id\": \"${{ github.run_id }}\"," >> results/batch_results.json
          echo "  \"content_generation_enabled\": ${{ steps.params.outputs.content_generation_enabled }}," >> results/batch_results.json
          echo "  \"processing_time\": 0," >> results/batch_results.json
          echo "  \"status\": \"completed\"," >> results/batch_results.json
          echo "  \"integration_method\": \"nanopub_content_generator\"" >> results/batch_results.json
          echo "}" >> results/batch_results.json
        fi
    
    - name: Upload processing artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: science-live-content-results-${{ steps.params.outputs.batch_id }}
        path: |
          results/**/*
          logs/**/*
          config/**/*
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create workflow summary
      if: always()
      run: |
        echo "## Science Live Content Generation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Batch ID:** \`${{ steps.params.outputs.batch_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Nanopublications Processed:** ${{ steps.params.outputs.nanopub_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "**Content Generation:** ENABLED" >> $GITHUB_STEP_SUMMARY
          echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> $GITHUB_STEP_SUMMARY
          echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Content Generation:** DISABLED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Count generated files
        CONTENT_COUNT=$(find results/content -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
        echo "**Generated Files:** $CONTENT_COUNT" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifacts:** Check the artifacts section above" >> $GITHUB_STEP_SUMMARY
        echo "- **Results Branch:** \`results-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        
        if [ "$CONTENT_COUNT" -gt 0 ]; then
          echo "- **Status:** ‚úÖ SUCCESS - Content generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ‚ö†Ô∏è PARTIAL - Check logs for issues" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Commit results to repository
      if: env.COMMIT_RESULTS_TO_REPO == 'true'
      run: |
        RESULTS_BRANCH="results-${{ github.run_id }}"
        
        git config --local user.email "content-generator@sciencelive.com"
        git config --local user.name "Science Live Content Generator"
        
        git checkout -b "$RESULTS_BRANCH"
        
        mkdir -p processing-results/${{ steps.params.outputs.batch_id }}
        
        # Copy all results to the processing-results directory
        if [ -d "results" ]; then
          cp -r results/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No results to copy"
        fi
        
        if [ -d "logs" ]; then
          cp -r logs/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No logs to copy"
        fi
        
        if [ -d "config" ]; then
          cp -r config/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No config to copy"
        fi
        
        # Create README for the results
        echo "# Science Live Content Generation Results" > processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Generated:** $(date -u)" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Batch ID:** ${{ steps.params.outputs.batch_id }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Nanopublications:** ${{ steps.params.outputs.nanopub_count }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Source:** ${{ steps.params.outputs.source }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## Content Generation" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Status:** ${{ steps.params.outputs.content_generation_enabled }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Integration:** nanopub_content_generator.py" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## Processed Nanopublications" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "${{ steps.params.outputs.nanopub_urls }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        
        # Count generated files
        CONTENT_COUNT=$(find processing-results/${{ steps.params.outputs.batch_id }}/content -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## Results Summary" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Generated Files:** $CONTENT_COUNT" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        
        if [ "$CONTENT_COUNT" -gt 0 ]; then
          echo "**Status:** ‚úÖ SUCCESS" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        else
          echo "**Status:** ‚ö†Ô∏è ISSUES DETECTED" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        fi
        
        # Commit the results
        git add processing-results/
        
        if ! git diff --cached --quiet; then
          git commit -m "Add Science Live content generation results for batch ${{ steps.params.outputs.batch_id }}
Generated \$CONTENT_COUNT content files using nanopub_content_generator.py integration
Content types: ${{ steps.params.outputs.content_types }}
AI model: ${{ steps.params.outputs.ai_model }}
Workflow run: ${{ github.run_id }}"
          
          git push origin "$RESULTS_BRANCH"
          echo "‚úÖ Results committed to branch: $RESULTS_BRANCH"
        else
          echo "‚ÑπÔ∏è  No new results to commit"
        fi
