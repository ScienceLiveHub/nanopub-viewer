# .github/workflows/process-nanopubs.yml
name: Science Live Content Generation (Simple Fix)

on:
  repository_dispatch:
    types: [process-nanopubs-content-gen, process-nanopubs-direct, process-nanopubs-professional]
  workflow_dispatch:
    inputs:
      nanopub_urls:
        description: 'Comma-separated nanopub URLs'
        required: true
        type: string
      batch_id:
        description: 'Batch ID for this processing run'
        required: false
        type: string
      content_types:
        description: 'Content types to generate (comma-separated)'
        required: false
        type: string
        default: 'linkedin_post'
      ai_model:
        description: 'AI model for content generation'
        required: false
        type: string
        default: 'llama3:8b'

env:
  COMMIT_RESULTS_TO_REPO: 'true'

jobs:
  simple-fixed-content-generation:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Git configuration
      run: |
        git config --global user.email "content-generator@sciencelive.com"
        git config --global user.name "Science Live Content Generator"
    
    - name: Install dependencies and nanopub-content-generator package
      run: |
        echo "üì¶ Installing Python dependencies..."
        python -m pip install --upgrade pip
        
        # Install from requirements.txt if it exists
        if [ -f "requirements.txt" ]; then
          echo "üìã Installing from requirements.txt..."
          pip install -r requirements.txt
        fi
        
        # Install the nanopub-content-generator package
        echo "üîß Installing nanopub-content-generator package..."
        pip install git+https://github.com/ScienceLiveHub/nanopub-content-generator.git
        
    - name: Extract processing parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "nanopub_urls=${{ github.event.client_payload.nanopub_urls_string }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.client_payload.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=${{ github.event.client_payload.nanopub_count }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.client_payload.source }}" >> $GITHUB_OUTPUT
          echo "content_generation_enabled=${{ github.event.client_payload.content_generation.enabled }}" >> $GITHUB_OUTPUT
          
          # Extract content types properly
          CONTENT_TYPES="${{ github.event.client_payload.content_generation.content_types_string }}"
          if [[ -z "$CONTENT_TYPES" ]] || [[ "$CONTENT_TYPES" == "null" ]]; then
            CONTENT_TYPES="linkedin_post"
          fi
          echo "content_types=$CONTENT_TYPES" >> $GITHUB_OUTPUT
          
          echo "ai_model=${{ github.event.client_payload.content_generation.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=${{ github.event.client_payload.content_generation.user_instructions }}" >> $GITHUB_OUTPUT
          echo "batch_description=${{ github.event.client_payload.content_generation.batch_description }}" >> $GITHUB_OUTPUT
        else
          echo "nanopub_urls=${{ github.event.inputs.nanopub_urls }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.inputs.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=$(echo '${{ github.event.inputs.nanopub_urls }}' | tr ',' '\n' | wc -l)" >> $GITHUB_OUTPUT
          echo "source=manual-workflow" >> $GITHUB_OUTPUT
          echo "content_generation_enabled=true" >> $GITHUB_OUTPUT
          echo "content_types=${{ github.event.inputs.content_types }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.inputs.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=" >> $GITHUB_OUTPUT
          echo "batch_description=Manual workflow execution" >> $GITHUB_OUTPUT
        fi
    
    - name: Display simple architecture information
      run: |
        echo "=== SCIENCE LIVE CONTENT GENERATION ==="
        echo "üì¶ Content Engine: nanopub-content-generator (Python package)"
        echo ""
        echo "üìä Processing Details:"
        echo "Timestamp: $(date -u)"
        echo "Batch ID: ${{ steps.params.outputs.batch_id }}"
        echo "Nanopublications: ${{ steps.params.outputs.nanopub_count }}"
        echo "Source: ${{ steps.params.outputs.source }}"
        echo "Workflow Run: ${{ github.run_id }}"
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "Content Generation: ENABLED"
          echo "Content Types: ${{ steps.params.outputs.content_types }}"
          echo "AI Model: ${{ steps.params.outputs.ai_model }}"
          echo "User Instructions: ${{ steps.params.outputs.user_instructions }}"
        else
          echo "Content Generation: DISABLED"
        fi
        
    - name: Setup AI environment
      run: |
        echo "ü§ñ Setting up AI environment for content generation..."
        
        # Create output directories
        mkdir -p results logs config results/content
        
        # Install and setup Ollama
        echo "üì• Installing Ollama..."
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Start Ollama service
        echo "üöÄ Starting Ollama service..."
        ollama serve &
        
        # Wait for Ollama to be ready
        echo "‚è≥ Waiting for Ollama to initialize..."
        sleep 30
        
        # Install the AI model
        AI_MODEL="${{ steps.params.outputs.ai_model }}"
        AI_MODEL=${AI_MODEL:-"llama3:8b"}
        echo "üì• Installing AI model: $AI_MODEL"
        
        if timeout 600 ollama pull "$AI_MODEL"; then
          echo "‚úÖ Successfully installed $AI_MODEL"
        elif timeout 600 ollama pull "llama3:8b"; then
          echo "‚ö†Ô∏è  Fallback: installed llama3:8b instead of $AI_MODEL"
        elif timeout 600 ollama pull "llama2:7b"; then
          echo "‚ö†Ô∏è  Fallback: installed llama2:7b instead of $AI_MODEL"
        else
          echo "‚ùå Failed to install any AI model"
          exit 1
        fi
        
        # Verify Ollama is working
        echo "üîç Verifying Ollama installation..."
        ollama list
        echo "‚úÖ AI environment ready"
    
    - name: Run simple fixed content generation
      env:
        NANOPUB_URLS: ${{ steps.params.outputs.nanopub_urls }}
        NANOPUB_COUNT: ${{ steps.params.outputs.nanopub_count }}
        BATCH_ID: ${{ steps.params.outputs.batch_id }}
        PROCESSING_SOURCE: ${{ steps.params.outputs.source }}
        ENABLE_CONTENT_GENERATION: ${{ steps.params.outputs.content_generation_enabled }}
        CONTENT_TYPES: ${{ steps.params.outputs.content_types }}
        AI_MODEL: ${{ steps.params.outputs.ai_model }}
        USER_INSTRUCTIONS: ${{ steps.params.outputs.user_instructions }}
        BATCH_DESCRIPTION: ${{ steps.params.outputs.batch_description }}
      run: |
        echo "üöÄ Starting simple fixed content generation..."
        
        echo "üìä Processing parameters:"
        echo "- URLs: $NANOPUB_URLS"
        echo "- Content types: $CONTENT_TYPES"
        echo "- AI model: $AI_MODEL"
        echo "- Batch ID: $BATCH_ID"
        echo "- Method: Direct package import with async fix"
        
        # Verify orchestrator script exists
        if [ ! -f "scripts/process_nanopubs.py" ]; then
          echo "‚ùå Error: scripts/process_nanopubs.py not found"
          exit 1
        fi
        
        echo "‚úÖ Orchestrator script found"
        
        # Run the fixed orchestration (same as your local setup)
        echo "üì¶ Running fixed orchestration..."
        python scripts/process_nanopubs.py
        
        echo "‚úÖ Fixed orchestration completed"
        
        # Show results
        if [ -d "./results/content" ]; then
          echo ""
          echo "=== SIMPLE FIXED GENERATION RESULTS ==="
          ls -la ./results/content/
          echo ""
          echo "üìÑ Generated files:"
          find ./results/content -name "*.txt" -type f | while read file; do
            SIZE=$(wc -c < "$file")
            echo "   $(basename "$file") ($SIZE bytes)"
          done
        else
          echo "‚ö†Ô∏è  No content directory found"
        fi
        
        # Show processing summary
        if [ -f "logs/processing_summary.txt" ]; then
          echo ""
          echo "=== SIMPLE FIXED PROCESSING SUMMARY ==="
          head -30 logs/processing_summary.txt
        fi
    
    - name: Verify simple fixed results
      run: |
        echo "üîç Verifying simple fixed content generation..."
        
        # Count generated files
        CONTENT_COUNT=$(find results/content -name "*.txt" -type f 2>/dev/null | wc -l)
        SUCCESS_COUNT=$(find results/content -name "*.txt" -type f ! -name "*ERROR*" 2>/dev/null | wc -l)
        ERROR_COUNT=$((CONTENT_COUNT - SUCCESS_COUNT))
        
        echo "üìä Simple Fixed Results:"
        echo "   Total files: $CONTENT_COUNT"
        echo "   Successful: $SUCCESS_COUNT"
        echo "   Errors: $ERROR_COUNT"
        echo "   Method: Direct package import (same as local)"
        
        if [ "$SUCCESS_COUNT" -gt 0 ]; then
          echo "‚úÖ Simple fixed generation successful"
          
          # Show content preview
          find results/content -name "*.txt" -type f ! -name "*ERROR*" | head -1 | while read file; do
            echo ""
            echo "üìÑ Preview of $(basename "$file"):"
            echo "----------------------------------------"
            # Show actual content (skip headers until we find the real content)
            awk '/^=/{found=1; next} found && NF>0 {print; if(++count>=3) exit}' "$file"
            echo "..."
          done
        else
          echo "‚ùå No content files were generated"
          echo "Check package installation and async handling"
        fi
    
    - name: Upload simple fixed artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: science-live-simple-results-${{ steps.params.outputs.batch_id }}
        path: |
          results/**/*
          logs/**/*
          config/**/*
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create workflow summary
      if: always()
      run: |
        CONTENT_COUNT=$(find results/content -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
        SUCCESS_COUNT=$(find results/content -name "*.txt" -type f ! -name "*ERROR*" 2>/dev/null | wc -l || echo "0")
        
        echo "## Science Live Simple Fixed Content Generation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Simple Architecture (Fixed)" >> $GITHUB_STEP_SUMMARY
        echo "- **Method**: Direct package import (same as your local setup)" >> $GITHUB_STEP_SUMMARY
        echo "- **Fix Applied**: Proper async handling with asyncio.run()" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: nanopub-content-generator (installed via pip)" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture**: Environment variables ‚Üí Orchestrator ‚Üí Package" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Processing Details" >> $GITHUB_STEP_SUMMARY
        echo "**Batch ID:** \`${{ steps.params.outputs.batch_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Nanopublications:** ${{ steps.params.outputs.nanopub_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> $GITHUB_STEP_SUMMARY
        echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> $GITHUB_STEP_SUMMARY
        echo "**Generated Files:** $CONTENT_COUNT (Success: $SUCCESS_COUNT)" >> $GITHUB_STEP_SUMMARY
        
        if [ "$SUCCESS_COUNT" -gt 0 ]; then
          echo "**Status:** ‚úÖ SUCCESS - Simple fixed approach working" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** ‚ùå FAILED - Check async handling and dependencies" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Simple Architecture Benefits" >> $GITHUB_STEP_SUMMARY
        echo "- **Same as Local**: Identical to your working local setup" >> $GITHUB_STEP_SUMMARY
        echo "- **Direct Import**: No CLI complexity or config files" >> $GITHUB_STEP_SUMMARY
        echo "- **Proper Async**: Fixed asyncio.run() for event loop management" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment Variables**: Uses same env vars as local" >> $GITHUB_STEP_SUMMARY
        echo "- **Better Debugging**: Clear error messages and async handling" >> $GITHUB_STEP_SUMMARY
    
    - name: Commit simple fixed results to repository
      if: env.COMMIT_RESULTS_TO_REPO == 'true'
      run: |
        RESULTS_BRANCH="results-${{ github.run_id }}"
        
        git checkout -b "$RESULTS_BRANCH"
        
        mkdir -p processing-results/${{ steps.params.outputs.batch_id }}
        
        # Copy all results
        if [ -d "results" ]; then
          cp -r results/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No results to copy"
        fi
        
        if [ -d "logs" ]; then
          cp -r logs/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No logs to copy"
        fi
        
        if [ -d "config" ]; then
          cp -r config/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No config to copy"
        fi
        
        # Create simple README
        CONTENT_COUNT=$(find processing-results/${{ steps.params.outputs.batch_id }}/content -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
        SUCCESS_COUNT=$(find processing-results/${{ steps.params.outputs.batch_id }}/content -name "*.txt" -type f ! -name "*ERROR*" 2>/dev/null | wc -l || echo "0")
        
        echo "# Science Live Simple Fixed Content Generation Results" > processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üîß Simple Fixed Architecture" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "This batch was processed using the simple fixed architecture:" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **Method**: Direct package import (same as local setup)" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **Fix Applied**: Proper async handling with asyncio.run()" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **Package**: nanopub-content-generator (pip install)" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **Architecture**: Environment variables ‚Üí Orchestrator ‚Üí Package" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üìä Processing Details" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Generated:** $(date -u)" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Batch ID:** ${{ steps.params.outputs.batch_id }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Nanopublications:** ${{ steps.params.outputs.nanopub_count }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Generated Files:** $CONTENT_COUNT (Success: $SUCCESS_COUNT)" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        
        if [ "$SUCCESS_COUNT" -gt 0 ]; then
          echo "**Status:** ‚úÖ SUCCESS" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        else
          echo "**Status:** ‚ùå FAILED" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        fi
        
        # Commit the results
        git add processing-results/
        
        if ! git diff --cached --quiet; then
          git commit -m "Add Science Live simple fixed content generation results for batch ${{ steps.params.outputs.batch_id }}"
          git push origin "$RESULTS_BRANCH"
          echo "‚úÖ Simple fixed results committed to branch: $RESULTS_BRANCH"
        else
          echo "‚ÑπÔ∏è  No new results to commit"
        fi
