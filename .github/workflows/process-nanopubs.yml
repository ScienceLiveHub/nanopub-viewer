# .github/workflows/process-nanopubs.yml
name: Science Live Content Generation (Package-Based Architecture)

on:
  repository_dispatch:
    types: [process-nanopubs-content-gen, process-nanopubs-direct, process-nanopubs-professional]
  workflow_dispatch:
    inputs:
      nanopub_urls:
        description: 'Comma-separated nanopub URLs'
        required: true
        type: string
      batch_id:
        description: 'Batch ID for this processing run'
        required: false
        type: string
      content_types:
        description: 'Content types to generate (comma-separated)'
        required: false
        type: string
        default: 'linkedin_post'
      ai_model:
        description: 'AI model for content generation'
        required: false
        type: string
        default: 'llama3:8b'

env:
  COMMIT_RESULTS_TO_REPO: 'true'

jobs:
  package-based-content-generation:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout GUI repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Git configuration
      run: |
        git config --global user.email "content-generator@sciencelive.com"
        git config --global user.name "Science Live Content Generator"
    
    - name: Install nanopub-content-generator package
      run: |
        echo "üì¶ Installing nanopub-content-generator as Python package..."
        python -m pip install --upgrade pip
        
        # Install the content generator package directly from GitHub
        pip install git+https://github.com/ScienceLiveHub/nanopub-content-generator.git
        
        # Verify installation
        python -c "import nanopub_content_generator; print('‚úÖ Package installed successfully')"
        
        echo "‚úÖ nanopub-content-generator package ready"
    
    - name: Extract processing parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "nanopub_urls=${{ github.event.client_payload.nanopub_urls_string }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.client_payload.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=${{ github.event.client_payload.nanopub_count }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.client_payload.source }}" >> $GITHUB_OUTPUT
          echo "content_generation_enabled=${{ github.event.client_payload.content_generation.enabled }}" >> $GITHUB_OUTPUT
          
          # FIXED: Handle content_types array properly
          CONTENT_TYPES="${{ github.event.client_payload.content_generation.content_types }}"
          # Convert JSON array to comma-separated string if needed
          if [[ "$CONTENT_TYPES" == "["* ]]; then
            CONTENT_TYPES=$(echo "$CONTENT_TYPES" | sed 's/\[//g' | sed 's/\]//g' | sed 's/"//g' | sed 's/ //g')
          fi
          echo "content_types=$CONTENT_TYPES" >> $GITHUB_OUTPUT
          
          echo "ai_model=${{ github.event.client_payload.content_generation.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=${{ github.event.client_payload.content_generation.user_instructions }}" >> $GITHUB_OUTPUT
          echo "batch_description=${{ github.event.client_payload.content_generation.batch_description }}" >> $GITHUB_OUTPUT
        else
          echo "nanopub_urls=${{ github.event.inputs.nanopub_urls }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.inputs.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=$(echo '${{ github.event.inputs.nanopub_urls }}' | tr ',' '\n' | wc -l)" >> $GITHUB_OUTPUT
          echo "source=manual-workflow" >> $GITHUB_OUTPUT
          echo "content_generation_enabled=true" >> $GITHUB_OUTPUT
          echo "content_types=${{ github.event.inputs.content_types }}" >> $GITHUB_OUTPUT
          echo "ai_model=${{ github.event.inputs.ai_model }}" >> $GITHUB_OUTPUT
          echo "user_instructions=" >> $GITHUB_OUTPUT
          echo "batch_description=Manual workflow execution" >> $GITHUB_OUTPUT
        fi
    
    - name: Display package-based architecture information
      run: |
        echo "=== SCIENCE LIVE PACKAGE-BASED CONTENT GENERATION ==="
        echo "üèóÔ∏è  Architecture: Clean package-based integration"
        echo "üì¶ Content Engine: nanopub-content-generator (Python package)"
        echo "üñ•Ô∏è  GUI Repository: nanopub-viewer (this repo)"
        echo "üîó Integration: Python package import + function calls"
        echo ""
        echo "üìä Processing Details:"
        echo "Timestamp: $(date -u)"
        echo "Batch ID: ${{ steps.params.outputs.batch_id }}"
        echo "Nanopublications: ${{ steps.params.outputs.nanopub_count }}"
        echo "Source: ${{ steps.params.outputs.source }}"
        echo "Workflow Run: ${{ github.run_id }}"
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "Content Generation: ENABLED"
          echo "Content Types: ${{ steps.params.outputs.content_types }}"
          echo "AI Model: ${{ steps.params.outputs.ai_model }}"
          echo "User Instructions: ${{ steps.params.outputs.user_instructions }}"
        else
          echo "Content Generation: DISABLED"
        fi
        
        echo ""
        echo "üéØ Package-Based Benefits:"
        echo "‚úÖ No repository cloning during runtime"
        echo "‚úÖ Standard Python package management"
        echo "‚úÖ Faster execution (no git operations)"
        echo "‚úÖ Better dependency resolution"
        echo "‚úÖ Version pinning capabilities"
        echo "========================================================="
    
    - name: Setup AI environment
      run: |
        echo "ü§ñ Setting up AI environment for content generation..."
        
        # Create output directories
        mkdir -p results logs config results/content
        
        # Install and setup Ollama
        echo "üì• Installing Ollama..."
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Start Ollama service
        echo "üöÄ Starting Ollama service..."
        ollama serve &
        
        # Wait for Ollama to be ready
        echo "‚è≥ Waiting for Ollama to initialize..."
        sleep 30
        
        # Install the AI model
        AI_MODEL="${{ steps.params.outputs.ai_model }}"
        AI_MODEL=${AI_MODEL:-"llama3:8b"}
        echo "üì• Installing AI model: $AI_MODEL"
        
        if timeout 600 ollama pull "$AI_MODEL"; then
          echo "‚úÖ Successfully installed $AI_MODEL"
        elif timeout 600 ollama pull "llama3:8b"; then
          echo "‚ö†Ô∏è  Fallback: installed llama3:8b instead of $AI_MODEL"
        elif timeout 600 ollama pull "llama2:7b"; then
          echo "‚ö†Ô∏è  Fallback: installed llama2:7b instead of $AI_MODEL"
        else
          echo "‚ùå Failed to install any AI model"
          exit 1
        fi
        
        # Verify Ollama is working
        echo "üîç Verifying Ollama installation..."
        ollama list
        echo "‚úÖ AI environment ready"
    
    - name: Run package-based content generation
      env:
        NANOPUB_URLS: ${{ steps.params.outputs.nanopub_urls }}
        NANOPUB_COUNT: ${{ steps.params.outputs.nanopub_count }}
        BATCH_ID: ${{ steps.params.outputs.batch_id }}
        PROCESSING_SOURCE: ${{ steps.params.outputs.source }}
        ENABLE_CONTENT_GENERATION: ${{ steps.params.outputs.content_generation_enabled }}
        CONTENT_TYPES: ${{ steps.params.outputs.content_types }}
        AI_MODEL: ${{ steps.params.outputs.ai_model }}
        USER_INSTRUCTIONS: ${{ steps.params.outputs.user_instructions }}
        BATCH_DESCRIPTION: ${{ steps.params.outputs.batch_description }}
      run: |
        echo "üöÄ Starting package-based content generation..."
        
        # Verify the orchestration script exists
        if [ ! -f "scripts/orchestrate_processing.py" ]; then
          echo "‚ùå Error: scripts/orchestrate_processing.py not found"
          echo "This should be the package-based orchestration script"
          exit 1
        fi
        
        echo "üìä Package-based processing parameters:"
        echo "- URLs: $NANOPUB_URLS"
        echo "- Content types: $CONTENT_TYPES"
        echo "- AI model: $AI_MODEL"
        echo "- Batch ID: $BATCH_ID"
        echo "- Method: Python package import"
        echo ""
        echo "üîß Package verification:"
        python -c 'import nanopub_content_generator; print("‚úÖ Package version:", getattr(nanopub_content_generator, "__version__", "unknown")); print("‚úÖ Package location:", nanopub_content_generator.__file__)'
        
        # Run the package-based orchestration
        echo "üì¶ Running package-based orchestration..."
        python scripts/orchestrate_processing.py
        
        echo "‚úÖ Package-based generation completed"
        
        # Show results
        if [ -d "./results/content" ]; then
          echo ""
          echo "=== PACKAGE-BASED GENERATION RESULTS ==="
          ls -la ./results/content/
          echo ""
          echo "üìÑ Generated files:"
          find ./results/content -name "*.txt" -type f | while read file; do
            SIZE=$(wc -c < "$file")
            echo "   $(basename "$file") ($SIZE bytes)"
          done
        else
          echo "‚ö†Ô∏è  No content directory found"
        fi
        
        # Show processing summary
        if [ -f "logs/processing_summary.txt" ]; then
          echo ""
          echo "=== PACKAGE-BASED PROCESSING SUMMARY ==="
          head -25 logs/processing_summary.txt
        fi
    
    - name: Verify package-based results
      run: |
        echo "üîç Verifying package-based content generation..."
        
        # Count generated files
        CONTENT_COUNT=$(find results/content -name "*.txt" -type f 2>/dev/null | wc -l)
        ERROR_COUNT=$(find results/content -name "*ERROR*" -type f 2>/dev/null | wc -l)
        SUCCESS_COUNT=$((CONTENT_COUNT - ERROR_COUNT))
        
        echo "üìä Package-Based Results:"
        echo "   Total files: $CONTENT_COUNT"
        echo "   Successful: $SUCCESS_COUNT"
        echo "   Errors: $ERROR_COUNT"
        echo "   Method: Python package (nanopub-content-generator)"
        
        if [ "$SUCCESS_COUNT" -gt 0 ]; then
          echo "‚úÖ Package-based generation successful"
          
          # Show brief preview of successful content
          find results/content -name "*.txt" -type f ! -name "*ERROR*" | head -2 | while read file; do
            echo ""
            echo "üìÑ Preview of $(basename "$file"):"
            echo "----------------------------------------"
            # Skip headers and show actual content
            tail -n +10 "$file" | head -3 | grep -v "^=" | grep -v "^#" || head -3 "$file"
            echo "..."
          done
        elif [ "$ERROR_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è  Package-based generation completed with errors"
          
          # Show error details
          find results/content -name "*ERROR*" -type f | head -2 | while read file; do
            echo ""
            echo "‚ùå Error in $(basename "$file"):"
            head -5 "$file" | tail -3
          done
        else
          echo "‚ùå No content files were generated"
          echo "Check package installation and dependencies"
        fi
        
        # Verify clean architecture
        echo ""
        echo "üèóÔ∏è  Architecture Verification:"
        if python -c "import nanopub_content_generator" 2>/dev/null; then
          echo "‚úÖ Python package integration working"
        else
          echo "‚ùå Python package integration failed"
        fi
        
        if [ ! -d "temp/nanopub-content-generator" ]; then
          echo "‚úÖ No repository cloning (clean package-based approach)"
        else
          echo "‚ö†Ô∏è  Repository directory found (should not exist in package-based approach)"
        fi
    
    - name: Create final results structure
      run: |
        # Ensure we have all required result files
        mkdir -p processing-results/${{ steps.params.outputs.batch_id }}
        
        # Create package-based summary if missing
        if [ ! -f "logs/processing_summary.txt" ]; then
          echo "SCIENCE LIVE PACKAGE-BASED CONTENT GENERATION SUMMARY" > logs/processing_summary.txt
          echo "======================================================" >> logs/processing_summary.txt
          echo "Architecture: Package-Based Integration (Clean)" >> logs/processing_summary.txt
          echo "Content Engine: nanopub-content-generator (Python package)" >> logs/processing_summary.txt
          echo "GUI Repository: nanopub-viewer (orchestration only)" >> logs/processing_summary.txt
          echo "Integration Method: pip install + Python import" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "Batch ID: ${{ steps.params.outputs.batch_id }}" >> logs/processing_summary.txt
          echo "Timestamp: $(date -u)" >> logs/processing_summary.txt
          echo "Nanopublications: ${{ steps.params.outputs.nanopub_count }}" >> logs/processing_summary.txt
          echo "Content Types: ${{ steps.params.outputs.content_types }}" >> logs/processing_summary.txt
          echo "AI Model: ${{ steps.params.outputs.ai_model }}" >> logs/processing_summary.txt
          echo "Source: ${{ steps.params.outputs.source }}" >> logs/processing_summary.txt
          echo "Workflow Run: ${{ github.run_id }}" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "PACKAGE-BASED GENERATION COMPLETED" >> logs/processing_summary.txt
          echo "Status: SUCCESS" >> logs/processing_summary.txt
          echo "Method: Python package integration" >> logs/processing_summary.txt
          echo "Content Generation: ${{ steps.params.outputs.content_generation_enabled }}" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "CLEAN ARCHITECTURE BENEFITS:" >> logs/processing_summary.txt
          echo "‚úÖ No repository cloning during execution" >> logs/processing_summary.txt
          echo "‚úÖ Standard Python package management with pip" >> logs/processing_summary.txt
          echo "‚úÖ Faster execution (no git operations)" >> logs/processing_summary.txt
          echo "‚úÖ Better dependency resolution and version control" >> logs/processing_summary.txt
          echo "‚úÖ Clean separation: GUI (orchestration) + Package (content generation)" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "PACKAGE INSTALLATION:" >> logs/processing_summary.txt
          echo "Command: pip install git+https://github.com/ScienceLiveHub/nanopub-content-generator.git" >> logs/processing_summary.txt
          echo "Import: from nanopub_content_generator import NanopubContentGenerator" >> logs/processing_summary.txt
          echo "" >> logs/processing_summary.txt
          echo "NANOPUBLICATION SOURCES:" >> logs/processing_summary.txt
          echo "${{ steps.params.outputs.nanopub_urls }}" >> logs/processing_summary.txt
        fi
        
        # Ensure batch results exist
        if [ ! -f "results/batch_results.json" ]; then
          CONTENT_COUNT=$(find results/content -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
          SUCCESS_COUNT=$(find results/content -name "*.txt" -type f ! -name "*ERROR*" 2>/dev/null | wc -l || echo "0")
          
          echo "{" > results/batch_results.json
          echo "  \"batch_id\": \"${{ steps.params.outputs.batch_id }}\"," >> results/batch_results.json
          echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> results/batch_results.json
          echo "  \"architecture\": \"package_based_clean\"," >> results/batch_results.json
          echo "  \"gui_repository\": \"nanopub-viewer\"," >> results/batch_results.json
          echo "  \"content_engine\": \"nanopub-content-generator\"," >> results/batch_results.json
          echo "  \"integration_method\": \"python_package\"," >> results/batch_results.json
          echo "  \"package_installation\": \"pip install git+https://github.com/ScienceLiveHub/nanopub-content-generator.git\"," >> results/batch_results.json
          echo "  \"nanopub_count\": ${{ steps.params.outputs.nanopub_count }}," >> results/batch_results.json
          echo "  \"content_types\": \"${{ steps.params.outputs.content_types }}\"," >> results/batch_results.json
          echo "  \"ai_model\": \"${{ steps.params.outputs.ai_model }}\"," >> results/batch_results.json
          echo "  \"source\": \"${{ steps.params.outputs.source }}\"," >> results/batch_results.json
          echo "  \"workflow_run_id\": \"${{ github.run_id }}\"," >> results/batch_results.json
          echo "  \"content_generation_enabled\": ${{ steps.params.outputs.content_generation_enabled }}," >> results/batch_results.json
          echo "  \"files_generated\": $CONTENT_COUNT," >> results/batch_results.json
          echo "  \"successful_generations\": $SUCCESS_COUNT," >> results/batch_results.json
          echo "  \"processing_method\": \"package_based\"," >> results/batch_results.json
          echo "  \"status\": \"completed\"" >> results/batch_results.json
          echo "}" >> results/batch_results.json
        fi
    
    - name: Upload package-based artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: science-live-package-results-${{ steps.params.outputs.batch_id }}
        path: |
          results/**/*
          logs/**/*
          config/**/*
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create workflow summary
      if: always()
      run: |
        CONTENT_COUNT=$(find results/content -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
        SUCCESS_COUNT=$(find results/content -name "*.txt" -type f ! -name "*ERROR*" 2>/dev/null | wc -l || echo "0")
        ERROR_COUNT=$((CONTENT_COUNT - SUCCESS_COUNT))
        
        echo "## Science Live Package-Based Content Generation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üèóÔ∏è Clean Package-Based Architecture" >> $GITHUB_STEP_SUMMARY
        echo "- **GUI Repository**: nanopub-viewer (this repo) - Orchestration only" >> $GITHUB_STEP_SUMMARY
        echo "- **Content Engine**: nanopub-content-generator - Python package" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Method**: \`pip install\` + Python import" >> $GITHUB_STEP_SUMMARY
        echo "- **Installation**: \`pip install git+https://github.com/ScienceLiveHub/nanopub-content-generator.git\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Processing Details" >> $GITHUB_STEP_SUMMARY
        echo "**Batch ID:** \`${{ steps.params.outputs.batch_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Nanopublications Processed:** ${{ steps.params.outputs.nanopub_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.params.outputs.content_generation_enabled }}" = "true" ]; then
          echo "**Content Generation:** ENABLED" >> $GITHUB_STEP_SUMMARY
          echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> $GITHUB_STEP_SUMMARY
          echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Content Generation:** DISABLED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "**Generated Files:** $CONTENT_COUNT (Success: $SUCCESS_COUNT, Errors: $ERROR_COUNT)" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì• Download Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifacts:** Check the artifacts section above" >> $GITHUB_STEP_SUMMARY
        echo "- **Results Branch:** \`results-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        
        if [ "$SUCCESS_COUNT" -gt 0 ]; then
          echo "- **Status:** ‚úÖ SUCCESS - Package-based generation successful" >> $GITHUB_STEP_SUMMARY
        elif [ "$ERROR_COUNT" -gt 0 ]; then
          echo "- **Status:** ‚ö†Ô∏è PARTIAL - Some content generated with errors" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ‚ùå FAILED - No content was generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Package-Based Architecture Benefits" >> $GITHUB_STEP_SUMMARY
        echo "- **No Repository Cloning**: Faster execution without git operations" >> $GITHUB_STEP_SUMMARY
        echo "- **Standard Python Practices**: Uses pip and standard package management" >> $GITHUB_STEP_SUMMARY
        echo "- **Better Dependency Management**: Pip handles all dependencies automatically" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Control**: Can pin to specific package versions or tags" >> $GITHUB_STEP_SUMMARY
        echo "- **Clean Separation**: GUI handles orchestration, package handles content generation" >> $GITHUB_STEP_SUMMARY
    
    - name: Commit package-based results to repository
      if: env.COMMIT_RESULTS_TO_REPO == 'true'
      run: |
        RESULTS_BRANCH="results-${{ github.run_id }}"
        
        git config --local user.email "content-generator@sciencelive.com"
        git config --local user.name "Science Live Content Generator"
        
        git checkout -b "$RESULTS_BRANCH"
        
        mkdir -p processing-results/${{ steps.params.outputs.batch_id }}
        
        # Copy all results to the processing-results directory
        if [ -d "results" ]; then
          cp -r results/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No results to copy"
        fi
        
        if [ -d "logs" ]; then
          cp -r logs/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No logs to copy"
        fi
        
        if [ -d "config" ]; then
          cp -r config/* processing-results/${{ steps.params.outputs.batch_id }}/ 2>/dev/null || echo "No config to copy"
        fi
        
        # Create comprehensive README
        CONTENT_COUNT=$(find processing-results/${{ steps.params.outputs.batch_id }}/content -name "*.txt" -type f 2>/dev/null | wc -l || echo "0")
        SUCCESS_COUNT=$(find processing-results/${{ steps.params.outputs.batch_id }}/content -name "*.txt" -type f ! -name "*ERROR*" 2>/dev/null | wc -l || echo "0")
        
        echo "# Science Live Package-Based Content Generation Results" > processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üèóÔ∏è Clean Package-Based Architecture" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "This batch was processed using the clean package-based architecture:" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **GUI Repository**: [nanopub-viewer](https://github.com/ScienceLiveHub/nanopub-viewer) - User interface and orchestration" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **Content Engine**: [nanopub-content-generator](https://github.com/ScienceLiveHub/nanopub-content-generator) - Python package for content generation" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **Integration**: \`pip install git+https://github.com/ScienceLiveHub/nanopub-content-generator.git\`" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "- **Usage**: \`from nanopub_content_generator import NanopubContentGenerator\`" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üìä Processing Details" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Generated:** $(date -u)" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Batch ID:** ${{ steps.params.outputs.batch_id }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Nanopublications:** ${{ steps.params.outputs.nanopub_count }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Source:** ${{ steps.params.outputs.source }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üéØ Content Generation" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Status:** ${{ steps.params.outputs.content_generation_enabled }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Content Types:** ${{ steps.params.outputs.content_types }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**AI Model:** ${{ steps.params.outputs.ai_model }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Method:** Python package integration" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üìà Results Summary" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Generated Files:** $CONTENT_COUNT" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Successful:** $SUCCESS_COUNT" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Errors:** $((CONTENT_COUNT - SUCCESS_COUNT))" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        
        if [ "$SUCCESS_COUNT" -gt 0 ]; then
          echo "**Status:** ‚úÖ SUCCESS" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        else
          echo "**Status:** ‚ùå FAILED" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        fi
        
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üì¶ Package Integration Details" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
          echo "**Installation Command:** \`pip install git+https://github.com/ScienceLiveHub/nanopub-content-generator.git\`" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Import Statement:** \`from nanopub_content_generator import NanopubContentGenerator\`" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "**Function Call:** \`generator.run_pipeline(...)\`" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "## üìù Processed Nanopublications" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        echo "${{ steps.params.outputs.nanopub_urls }}" >> processing-results/${{ steps.params.outputs.batch_id }}/README.md
        
        # Commit the results
        git add processing-results/
        
        if ! git diff --cached --quiet; then
          git commit -m "Add Science Live package-based content generation results for batch ${{ steps.params.outputs.batch_id }}"

          git push origin "$RESULTS_BRANCH"
          echo "‚úÖ Package-based results committed to branch: $RESULTS_BRANCH"
        else
          echo "‚ÑπÔ∏è  No new results to commit"
        fi
