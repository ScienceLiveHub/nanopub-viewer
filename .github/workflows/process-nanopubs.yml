# .github/workflows/process-nanopubs.yml
name: Process Nanopublications

on:
  repository_dispatch:
    types: [process-nanopubs-direct]
  workflow_dispatch:
    inputs:
      nanopub_urls:
        description: 'Comma-separated nanopub URLs'
        required: true
        type: string
      batch_id:
        description: 'Batch ID for this processing run'
        required: false
        type: string

jobs:
  process-nanopubs:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pathlib
    
    - name: Extract processing parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "nanopub_urls=${{ github.event.client_payload.nanopub_urls_string }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.client_payload.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=${{ github.event.client_payload.nanopub_count }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.client_payload.source }}" >> $GITHUB_OUTPUT
        else
          echo "nanopub_urls=${{ github.event.inputs.nanopub_urls }}" >> $GITHUB_OUTPUT
          echo "batch_id=${{ github.event.inputs.batch_id }}" >> $GITHUB_OUTPUT
          echo "nanopub_count=$(echo '${{ github.event.inputs.nanopub_urls }}' | tr ',' '\n' | wc -l)" >> $GITHUB_OUTPUT
          echo "source=manual" >> $GITHUB_OUTPUT
        fi
    
    - name: Display processing info
      run: |
        echo "üöÄ Starting nanopub processing"
        echo "üìä Batch ID: ${{ steps.params.outputs.batch_id }}"
        echo "üî¢ Count: ${{ steps.params.outputs.nanopub_count }} nanopubs"
        echo "üìã Source: ${{ steps.params.outputs.source }}"
        echo "‚è∞ Started: $(date -u)"
    
    - name: Run nanopub processing
      env:
        NANOPUB_URLS: ${{ steps.params.outputs.nanopub_urls }}
        NANOPUB_COUNT: ${{ steps.params.outputs.nanopub_count }}
        BATCH_ID: ${{ steps.params.outputs.batch_id }}
        PROCESSING_SOURCE: ${{ steps.params.outputs.source }}
      run: |
        echo "üî¨ Executing nanopub processor..."
        cd scripts
        python process_nanopubs.py
    
    - name: Upload processing results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nanopub-processing-results-${{ steps.params.outputs.batch_id }}
        path: |
          results/
          logs/
        retention-days: 30
    
    - name: Create results summary
      if: always()
      run: |
        echo "## üìä Nanopub Processing Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Batch ID:** \`${{ steps.params.outputs.batch_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Nanopubs Processed:** ${{ steps.params.outputs.nanopub_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**Processing Time:** $(date -d @$SECONDS -u +%H:%M:%S)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "logs/processing_summary.txt" ]; then
          echo "### üìã Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -50 logs/processing_summary.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "results/batch_results.json" ]; then
          echo "### üìà Quick Stats" >> $GITHUB_STEP_SUMMARY
          PROCESSED=$(jq -r '.processed' results/batch_results.json)
          FAILED=$(jq -r '.failed' results/batch_results.json)
          TOTAL_TIME=$(jq -r '.processing_time_seconds' results/batch_results.json)
          echo "- ‚úÖ Successfully processed: $PROCESSED" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ‚è±Ô∏è Total time: ${TOTAL_TIME}s" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üì• **Download Results:** Check the artifacts section above" >> $GITHUB_STEP_SUMMARY
    
    - name: Commit results to repository (optional)
      if: success() && github.event.client_payload.commit_results == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create results branch if it doesn't exist
        git checkout -b results 2>/dev/null || git checkout results
        
        # Copy results to a permanent location
        mkdir -p processing-results/${{ steps.params.outputs.batch_id }}
        cp -r results/* processing-results/${{ steps.params.outputs.batch_id }}/
        cp -r logs/* processing-results/${{ steps.params.outputs.batch_id }}/
        
        # Commit if there are changes
        git add processing-results/
        if ! git diff --staged --quiet; then
          git commit -m "Add processing results for batch ${{ steps.params.outputs.batch_id }}"
          git push origin results
          echo "‚úÖ Results committed to results branch"
        else
          echo "‚ÑπÔ∏è No new results to commit"
        fi
